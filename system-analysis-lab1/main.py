import sys
from PyQt5.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QSpinBox,
    QTableWidget,
    QTableWidgetItem,
    QPushButton,
    QTextEdit,
    QHeaderView,
    QMessageBox,
    QFileDialog,
)
from PyQt5.QtCore import Qt, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QColor
import matplotlib.pyplot as plt
import networkx as nx


class AnimatedButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self._animation = QPropertyAnimation(self, b"color")
        self._animation.setDuration(200)
        self.normal_color = QColor(100, 149, 237)
        self.hover_color = QColor(65, 105, 225)
        self.setStyleSheet(
            f"""
            QPushButton {{
                background-color: {self.normal_color.name()};
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
                font-weight: 500;
            }}
            QPushButton:hover {{
                background-color: {self.hover_color.name()};
            }}
        """
        )

    def enterEvent(self, event):
        self._animate_color(self.normal_color, self.hover_color)
        super().enterEvent(event)

    def leaveEvent(self, event):
        self._animate_color(self.hover_color, self.normal_color)
        super().leaveEvent(event)

    def _animate_color(self, start, end):
        self._animation.stop()
        self._animation.setStartValue(start)
        self._animation.setEndValue(end)
        self._animation.setEasingCurve(QEasingCurve.InOutQuad)
        self._animation.start()


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.setStyleSheet(self.get_styles())
        self.resize(1280, 800)

    def get_styles(self):
        return """
            QWidget {
                background-color: #f8f9fa;
                font-family: 'Segoe UI', sans-serif;
            }
            QLabel {
                color: #495057;
                font-size: 14px;
                font-weight: 500;
            }
            QSpinBox {
                padding: 5px;
                border: 1px solid #ced4da;
                border-radius: 4px;
                background: white;
            }
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                gridline-color: #e9ecef;
                font-size: 14px;
            }
            QHeaderView::section {
                background-color: #6c757d;
                color: white;
                padding: 8px;
                border: none;
                font-weight: 500;
            }
            QTextEdit {
                background: white;
                border: 1px solid #ced4da;
                border-radius: 4px;
                padding: 5px;
                font-size: 14px;
            }
        """

    def initUI(self):
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Ä¢ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1")

        self.vertices_spin = QSpinBox()
        self.vertices_spin.setMinimum(1)
        self.vertices_spin.setValue(2)

        self.edges_spin = QSpinBox()
        self.edges_spin.setMinimum(1)
        self.edges_spin.setValue(1)

        self.update_b_button = AnimatedButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        self.update_b_button.clicked.connect(self.update_b_table)

        self.load_button = AnimatedButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞")
        self.load_button.clicked.connect(self.load_from_file)

        self.clear_button = AnimatedButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
        self.clear_button.clicked.connect(self.clear_all)

        self.convert_button = AnimatedButton("‚ö° –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å")
        self.convert_button.clicked.connect(self.convert)

        self.b_table = QTableWidget()
        self.b_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.a_table = QTableWidget()
        self.a_table.setFixedHeight(250)

        self.g_plus_text = QTextEdit()
        self.g_plus_text.setReadOnly(True)

        controls_layout = QHBoxLayout()
        controls_layout.addWidget(QLabel("–ß–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω:"))
        controls_layout.addWidget(self.vertices_spin)
        controls_layout.addWidget(QLabel("–ß–∏—Å–ª–æ —Ä–µ–±–µ—Ä:"))
        controls_layout.addWidget(self.edges_spin)
        controls_layout.addStretch()

        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(self.update_b_button)
        buttons_layout.addWidget(self.load_button)
        buttons_layout.addWidget(self.clear_button)
        buttons_layout.addWidget(self.convert_button)
        buttons_layout.addStretch()

        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.addLayout(controls_layout)
        main_layout.addWidget(QLabel("–ú–∞—Ç—Ä–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ü–∏–π B:"))
        main_layout.addWidget(self.b_table)
        main_layout.addLayout(buttons_layout)
        main_layout.addWidget(QLabel("–ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ A:"))
        main_layout.addWidget(self.a_table)
        main_layout.addWidget(QLabel("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∞–≤—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ü–∏–π G+:"))
        main_layout.addWidget(self.g_plus_text)

        self.setLayout(main_layout)
        self.update_b_table()

    def clear_all(self):
        self.vertices_spin.setValue(2)
        self.edges_spin.setValue(1)
        self.update_b_table()
        self.a_table.clear()
        self.a_table.setRowCount(0)
        self.a_table.setColumnCount(0)
        self.g_plus_text.clear()

    def update_b_table(self):
        m = self.vertices_spin.value()
        n = self.edges_spin.value()
        self.b_table.setRowCount(m)
        self.b_table.setColumnCount(n)
        self.b_table.setHorizontalHeaderLabels([f"–†–µ–±—Ä–æ {i+1}" for i in range(n)])
        self.b_table.setVerticalHeaderLabels([f"–í–µ—Ä—à–∏–Ω–∞ {i+1}" for i in range(m)])
        for i in range(m):
            for j in range(n):
                if self.b_table.item(i, j) is None:
                    item = QTableWidgetItem("0")
                    item.setTextAlignment(Qt.AlignCenter)
                    self.b_table.setItem(i, j, item)
                else:
                    self.b_table.item(i, j).setText("0")
        self.b_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def load_from_file(self):
        file_name, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "", "Text Files (*.txt);;All Files (*)"
        )
        if not file_name:
            return

        try:
            with open(file_name, "r") as file:
                lines = file.readlines()
                if not lines:
                    raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π")

                header = lines[0].strip().split()
                if len(header) != 2:
                    raise ValueError(
                        "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞: –≤–µ—Ä—à–∏–Ω—ã –∏ —Ä–µ–±—Ä–∞"
                    )
                m, n = map(int, header)
                if m < 1 or n < 1:
                    raise ValueError("–ß–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

                self.vertices_spin.setValue(m)
                self.edges_spin.setValue(n)
                self.update_b_table()

                if len(lines) - 1 != m:
                    raise ValueError(
                        f"–û–∂–∏–¥–∞–ª–æ—Å—å {m} —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã, –Ω–∞–π–¥–µ–Ω–æ {len(lines)-1}"
                    )
                for i in range(m):
                    row = lines[i + 1].strip().split()
                    if len(row) != n:
                        raise ValueError(f"–°—Ç—Ä–æ–∫–∞ {i+1} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å {n} –∑–Ω–∞—á–µ–Ω–∏–π")
                    for j, val in enumerate(row):
                        if val not in {"0", "1", "-1"}:
                            raise ValueError(
                                f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{val}' –≤ —Å—Ç—Ä–æ–∫–µ {i+1}, —Å—Ç–æ–ª–±—Ü–µ {j+1}"
                            )
                        item = QTableWidgetItem(val)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.b_table.setItem(i, j, item)

        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:\n{str(e)}", QMessageBox.Ok
            )

    def convert(self):
        try:
            m = self.vertices_spin.value()
            n = self.edges_spin.value()

            B = []
            for i in range(m):
                row = []
                for j in range(n):
                    item = self.b_table.item(i, j)
                    if item is None:
                        val = 0
                    else:
                        text = item.text().strip()
                        if text == "1":
                            val = 1
                        elif text == "-1":
                            val = -1
                        elif text == "0":
                            val = 0
                        else:
                            raise ValueError(
                                f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{text}' –≤ –≤–µ—Ä—à–∏–Ω–µ {i+1}, —Ä–µ–±—Ä–æ {j+1}"
                            )
                    row.append(val)
                B.append(row)

            A, G_plus = self.convert_incidence(B)

            self.a_table.setRowCount(m)
            self.a_table.setColumnCount(m)
            self.a_table.setHorizontalHeaderLabels([str(i + 1) for i in range(m)])
            self.a_table.setVerticalHeaderLabels([str(i + 1) for i in range(m)])
            for i in range(m):
                for j in range(m):
                    item = QTableWidgetItem(str(A[i][j]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.a_table.setItem(i, j, item)

            text = ""
            for vertex in sorted(G_plus.keys()):
                end_vertices = (
                    ", ".join(map(str, sorted(set(G_plus[vertex]))))
                    if G_plus[vertex]
                    else "0"
                )
                text += f"–í–µ—Ä—à–∏–Ω–∞ {vertex+1}: {end_vertices}\n"
            self.g_plus_text.setText(text)

            self.draw_graph(A)

        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}", QMessageBox.Ok
            )

    def convert_incidence(self, B):
        m = len(B)
        n = len(B[0]) if m > 0 else 0
        A = [[0] * m for _ in range(m)]
        G_plus = {i: set() for i in range(m)}
        existing_edges = set()

        for edge_idx in range(n):
            start = None
            end = None
            for vertex in range(m):
                val = B[vertex][edge_idx]
                if val == 1:
                    if start is not None:
                        raise ValueError(
                            f"–í —Ä–µ–±—Ä–µ {edge_idx+1} –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω"
                        )
                    start = vertex
                elif val == -1:
                    if end is not None:
                        raise ValueError(
                            f"–í —Ä–µ–±—Ä–µ {edge_idx+1} –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω"
                        )
                    end = vertex
                elif val != 0:
                    raise ValueError(
                        f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {val} –≤ —Ä–µ–±—Ä–µ {edge_idx+1}, –≤–µ—Ä—à–∏–Ω–∞ {vertex+1}"
                    )
            if start is None:
                raise ValueError(f"–í —Ä–µ–±—Ä–µ {edge_idx+1} –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã (1)")
            if end is None:
                raise ValueError(f"–í —Ä–µ–±—Ä–µ {edge_idx+1} –Ω–µ—Ç –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã (-1)")
            if (start, end) in existing_edges:
                raise ValueError(
                    f"–†–µ–±—Ä–æ –º–µ–∂–¥—É –≤–µ—Ä—à–∏–Ω–∞–º–∏ {start+1} –∏ {end+1} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
            existing_edges.add((start, end))
            A[start][end] += 1

            if start is not None:
                G_plus[start].add(end + 1)

        G_plus = {k: sorted(list(v)) for k, v in G_plus.items()}
        return A, G_plus

    def draw_graph(self, A):
        G = nx.DiGraph()
        m = len(A)
        for i in range(m):
            G.add_node(i + 1)
        for i in range(m):
            for j in range(m):
                if A[i][j] > 0:
                    G.add_edge(i + 1, j + 1)
        plt.figure(figsize=(8, 6))
        pos = nx.spring_layout(G)
        nx.draw(
            G,
            pos,
            with_labels=True,
            node_color="lightblue",
            node_size=500,
            font_size=12,
            font_weight="bold",
            arrows=True,
            edge_color="gray",
        )
        plt.title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞")
        plt.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
